<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>

    <link rel="stylesheet" href="/css/index.css" />

    <script src="/js/three.min.js"></script>
    <script src="/js/Long.min.js"></script>
    <script src="/js/ByteBufferAB.min.js"></script>
    <script src="/js/ProtoBuf.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
        var ProtoBuf = dcodeIO.ProtoBuf;
        var msgBuilder = ProtoBuf.loadProtoFile("proto/Message.proto");
        var structBuilder = ProtoBuf.loadProtoFile("proto/Struct.proto");

        var Packet = msgBuilder.build("Packet");

        // Init message - struct dictionary
        var table = [];
        for (var msgName in Packet.Message) {
            var value = Packet.Message[msgName];
            table[value] = structBuilder.build(msgName);
        }

        var packet = { msg: "", data: "" };

        var LOGIN = structBuilder.build("LOGIN");
        var send = new LOGIN({ "id": "skyser2003", "pw": 4 });
        packet.msg = msgBuilder.build("Packet").Message.LOGIN;
        packet.data = send.toHex();

        socket.emit("packet", packet);

        socket.on("packet", function (data) {
            var msg = data.msg;
            var hex = data.data;

            var struct = table[msg];
            var decoded = struct.decodeHex(hex);

            console.log(decoded);
        });
    </script>
</head>
<body>
    <script type="text/javascript">
        var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        var geometry = new THREE.CubeGeometry(1, 1, 1);
        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        var cube = new THREE.Mesh(geometry, material);
        scene.add(cube);

        camera.position.z = 5;

        var render = function () {
            requestAnimationFrame(render);

            cube.rotation.x += 0.1;
            cube.rotation.y += 0.1;

            renderer.render(scene, camera);
        };

        render();
    </script>
</body>
</html>