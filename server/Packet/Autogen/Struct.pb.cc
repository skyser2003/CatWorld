// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOGIN_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* STOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOGIN_RESULT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOGIN_RESULT_reflection_ = NULL;
const ::google::protobuf::Descriptor* POSITION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POSITION_reflection_ = NULL;
const ::google::protobuf::Descriptor* OBJECT_APPEAR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OBJECT_APPEAR_reflection_ = NULL;
const ::google::protobuf::Descriptor* MAP_ENTER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MAP_ENTER_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Struct_2eproto() {
  protobuf_AddDesc_Struct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Struct.proto");
  GOOGLE_CHECK(file != NULL);
  LOGIN_descriptor_ = file->message_type(0);
  static const int LOGIN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, pw_),
  };
  LOGIN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOGIN_descriptor_,
      LOGIN::default_instance_,
      LOGIN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOGIN));
  CHAT_descriptor_ = file->message_type(1);
  static const int CHAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAT, msg_),
  };
  CHAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHAT_descriptor_,
      CHAT::default_instance_,
      CHAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHAT));
  MOVE_descriptor_ = file->message_type(2);
  static const int MOVE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MOVE, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MOVE, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MOVE, z_),
  };
  MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MOVE_descriptor_,
      MOVE::default_instance_,
      MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MOVE));
  STOP_descriptor_ = file->message_type(3);
  static const int STOP_offsets_[1] = {
  };
  STOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STOP_descriptor_,
      STOP::default_instance_,
      STOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STOP));
  LOGIN_RESULT_descriptor_ = file->message_type(4);
  static const int LOGIN_RESULT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN_RESULT, result_),
  };
  LOGIN_RESULT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOGIN_RESULT_descriptor_,
      LOGIN_RESULT::default_instance_,
      LOGIN_RESULT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN_RESULT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN_RESULT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOGIN_RESULT));
  POSITION_descriptor_ = file->message_type(5);
  static const int POSITION_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSITION, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSITION, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSITION, z_),
  };
  POSITION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POSITION_descriptor_,
      POSITION::default_instance_,
      POSITION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSITION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSITION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POSITION));
  OBJECT_APPEAR_descriptor_ = file->message_type(6);
  static const int OBJECT_APPEAR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBJECT_APPEAR, uid_),
  };
  OBJECT_APPEAR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OBJECT_APPEAR_descriptor_,
      OBJECT_APPEAR::default_instance_,
      OBJECT_APPEAR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBJECT_APPEAR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBJECT_APPEAR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OBJECT_APPEAR));
  MAP_ENTER_descriptor_ = file->message_type(7);
  static const int MAP_ENTER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAP_ENTER, speed_),
  };
  MAP_ENTER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MAP_ENTER_descriptor_,
      MAP_ENTER::default_instance_,
      MAP_ENTER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAP_ENTER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAP_ENTER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MAP_ENTER));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Struct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOGIN_descriptor_, &LOGIN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHAT_descriptor_, &CHAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MOVE_descriptor_, &MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STOP_descriptor_, &STOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOGIN_RESULT_descriptor_, &LOGIN_RESULT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POSITION_descriptor_, &POSITION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OBJECT_APPEAR_descriptor_, &OBJECT_APPEAR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MAP_ENTER_descriptor_, &MAP_ENTER::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Struct_2eproto() {
  delete LOGIN::default_instance_;
  delete LOGIN_reflection_;
  delete CHAT::default_instance_;
  delete CHAT_reflection_;
  delete MOVE::default_instance_;
  delete MOVE_reflection_;
  delete STOP::default_instance_;
  delete STOP_reflection_;
  delete LOGIN_RESULT::default_instance_;
  delete LOGIN_RESULT_reflection_;
  delete POSITION::default_instance_;
  delete POSITION_reflection_;
  delete OBJECT_APPEAR::default_instance_;
  delete OBJECT_APPEAR_reflection_;
  delete MAP_ENTER::default_instance_;
  delete MAP_ENTER_reflection_;
}

void protobuf_AddDesc_Struct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Struct.proto\032\rMessage.proto\"\037\n\005LOGIN\022\n"
    "\n\002id\030\001 \002(\t\022\n\n\002pw\030\002 \002(\t\"\023\n\004CHAT\022\013\n\003msg\030\001 "
    "\002(\t\"\'\n\004MOVE\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003"
    " \002(\002\"\006\n\004STOP\"\036\n\014LOGIN_RESULT\022\016\n\006result\030\001"
    " \002(\005\"+\n\010POSITION\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t"
    "\n\001z\030\003 \002(\002\"\034\n\rOBJECT_APPEAR\022\013\n\003uid\030\001 \002(\005\""
    "\032\n\tMAP_ENTER\022\r\n\005speed\030\001 \002(\002", 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Struct.proto", &protobuf_RegisterTypes);
  LOGIN::default_instance_ = new LOGIN();
  CHAT::default_instance_ = new CHAT();
  MOVE::default_instance_ = new MOVE();
  STOP::default_instance_ = new STOP();
  LOGIN_RESULT::default_instance_ = new LOGIN_RESULT();
  POSITION::default_instance_ = new POSITION();
  OBJECT_APPEAR::default_instance_ = new OBJECT_APPEAR();
  MAP_ENTER::default_instance_ = new MAP_ENTER();
  LOGIN::default_instance_->InitAsDefaultInstance();
  CHAT::default_instance_->InitAsDefaultInstance();
  MOVE::default_instance_->InitAsDefaultInstance();
  STOP::default_instance_->InitAsDefaultInstance();
  LOGIN_RESULT::default_instance_->InitAsDefaultInstance();
  POSITION::default_instance_->InitAsDefaultInstance();
  OBJECT_APPEAR::default_instance_->InitAsDefaultInstance();
  MAP_ENTER::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Struct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Struct_2eproto {
  StaticDescriptorInitializer_Struct_2eproto() {
    protobuf_AddDesc_Struct_2eproto();
  }
} static_descriptor_initializer_Struct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LOGIN::kIdFieldNumber;
const int LOGIN::kPwFieldNumber;
#endif  // !_MSC_VER

LOGIN::LOGIN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LOGIN::InitAsDefaultInstance() {
}

LOGIN::LOGIN(const LOGIN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LOGIN::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOGIN::~LOGIN() {
  SharedDtor();
}

void LOGIN::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (pw_ != &::google::protobuf::internal::kEmptyString) {
    delete pw_;
  }
  if (this != default_instance_) {
  }
}

void LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_descriptor_;
}

const LOGIN& LOGIN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

LOGIN* LOGIN::default_instance_ = NULL;

LOGIN* LOGIN::New() const {
  return new LOGIN;
}

void LOGIN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_pw()) {
      if (pw_ != &::google::protobuf::internal::kEmptyString) {
        pw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pw;
        break;
      }

      // required string pw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pw().data(), this->pw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string pw = 2;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pw().data(), this->pw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LOGIN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string pw = 2;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pw().data(), this->pw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LOGIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string pw = 2;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOGIN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOGIN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOGIN::MergeFrom(const LOGIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN::CopyFrom(const LOGIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LOGIN::Swap(LOGIN* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pw_, other->pw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOGIN_descriptor_;
  metadata.reflection = LOGIN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHAT::kMsgFieldNumber;
#endif  // !_MSC_VER

CHAT::CHAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHAT::InitAsDefaultInstance() {
}

CHAT::CHAT(const CHAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHAT::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHAT::~CHAT() {
  SharedDtor();
}

void CHAT::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CHAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_descriptor_;
}

const CHAT& CHAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

CHAT* CHAT::default_instance_ = NULL;

CHAT* CHAT::New() const {
  return new CHAT;
}

void CHAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHAT::MergeFrom(const CHAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHAT::CopyFrom(const CHAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CHAT::Swap(CHAT* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHAT_descriptor_;
  metadata.reflection = CHAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MOVE::kXFieldNumber;
const int MOVE::kYFieldNumber;
const int MOVE::kZFieldNumber;
#endif  // !_MSC_VER

MOVE::MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MOVE::InitAsDefaultInstance() {
}

MOVE::MOVE(const MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MOVE::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MOVE::~MOVE() {
  SharedDtor();
}

void MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MOVE_descriptor_;
}

const MOVE& MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

MOVE* MOVE::default_instance_ = NULL;

MOVE* MOVE::New() const {
  return new MOVE;
}

void MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MOVE::MergeFrom(const MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MOVE::CopyFrom(const MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MOVE::Swap(MOVE* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MOVE_descriptor_;
  metadata.reflection = MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

STOP::STOP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STOP::InitAsDefaultInstance() {
}

STOP::STOP(const STOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STOP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STOP::~STOP() {
  SharedDtor();
}

void STOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STOP_descriptor_;
}

const STOP& STOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

STOP* STOP::default_instance_ = NULL;

STOP* STOP::New() const {
  return new STOP;
}

void STOP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void STOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STOP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STOP::MergeFrom(const STOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STOP::CopyFrom(const STOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STOP::IsInitialized() const {

  return true;
}

void STOP::Swap(STOP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STOP_descriptor_;
  metadata.reflection = STOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOGIN_RESULT::kResultFieldNumber;
#endif  // !_MSC_VER

LOGIN_RESULT::LOGIN_RESULT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LOGIN_RESULT::InitAsDefaultInstance() {
}

LOGIN_RESULT::LOGIN_RESULT(const LOGIN_RESULT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LOGIN_RESULT::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOGIN_RESULT::~LOGIN_RESULT() {
  SharedDtor();
}

void LOGIN_RESULT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOGIN_RESULT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOGIN_RESULT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_RESULT_descriptor_;
}

const LOGIN_RESULT& LOGIN_RESULT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

LOGIN_RESULT* LOGIN_RESULT::default_instance_ = NULL;

LOGIN_RESULT* LOGIN_RESULT::New() const {
  return new LOGIN_RESULT;
}

void LOGIN_RESULT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOGIN_RESULT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LOGIN_RESULT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LOGIN_RESULT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LOGIN_RESULT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOGIN_RESULT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOGIN_RESULT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOGIN_RESULT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOGIN_RESULT::MergeFrom(const LOGIN_RESULT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOGIN_RESULT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN_RESULT::CopyFrom(const LOGIN_RESULT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN_RESULT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LOGIN_RESULT::Swap(LOGIN_RESULT* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOGIN_RESULT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOGIN_RESULT_descriptor_;
  metadata.reflection = LOGIN_RESULT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POSITION::kXFieldNumber;
const int POSITION::kYFieldNumber;
const int POSITION::kZFieldNumber;
#endif  // !_MSC_VER

POSITION::POSITION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void POSITION::InitAsDefaultInstance() {
}

POSITION::POSITION(const POSITION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void POSITION::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POSITION::~POSITION() {
  SharedDtor();
}

void POSITION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void POSITION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POSITION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POSITION_descriptor_;
}

const POSITION& POSITION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

POSITION* POSITION::default_instance_ = NULL;

POSITION* POSITION::New() const {
  return new POSITION;
}

void POSITION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POSITION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void POSITION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* POSITION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int POSITION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POSITION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POSITION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POSITION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POSITION::MergeFrom(const POSITION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POSITION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POSITION::CopyFrom(const POSITION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POSITION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void POSITION::Swap(POSITION* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POSITION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POSITION_descriptor_;
  metadata.reflection = POSITION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OBJECT_APPEAR::kUidFieldNumber;
#endif  // !_MSC_VER

OBJECT_APPEAR::OBJECT_APPEAR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OBJECT_APPEAR::InitAsDefaultInstance() {
}

OBJECT_APPEAR::OBJECT_APPEAR(const OBJECT_APPEAR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OBJECT_APPEAR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OBJECT_APPEAR::~OBJECT_APPEAR() {
  SharedDtor();
}

void OBJECT_APPEAR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OBJECT_APPEAR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OBJECT_APPEAR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OBJECT_APPEAR_descriptor_;
}

const OBJECT_APPEAR& OBJECT_APPEAR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

OBJECT_APPEAR* OBJECT_APPEAR::default_instance_ = NULL;

OBJECT_APPEAR* OBJECT_APPEAR::New() const {
  return new OBJECT_APPEAR;
}

void OBJECT_APPEAR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OBJECT_APPEAR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OBJECT_APPEAR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OBJECT_APPEAR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OBJECT_APPEAR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OBJECT_APPEAR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OBJECT_APPEAR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OBJECT_APPEAR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OBJECT_APPEAR::MergeFrom(const OBJECT_APPEAR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OBJECT_APPEAR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBJECT_APPEAR::CopyFrom(const OBJECT_APPEAR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBJECT_APPEAR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OBJECT_APPEAR::Swap(OBJECT_APPEAR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OBJECT_APPEAR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OBJECT_APPEAR_descriptor_;
  metadata.reflection = OBJECT_APPEAR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MAP_ENTER::kSpeedFieldNumber;
#endif  // !_MSC_VER

MAP_ENTER::MAP_ENTER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MAP_ENTER::InitAsDefaultInstance() {
}

MAP_ENTER::MAP_ENTER(const MAP_ENTER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MAP_ENTER::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MAP_ENTER::~MAP_ENTER() {
  SharedDtor();
}

void MAP_ENTER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MAP_ENTER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MAP_ENTER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAP_ENTER_descriptor_;
}

const MAP_ENTER& MAP_ENTER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();
  return *default_instance_;
}

MAP_ENTER* MAP_ENTER::default_instance_ = NULL;

MAP_ENTER* MAP_ENTER::New() const {
  return new MAP_ENTER;
}

void MAP_ENTER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MAP_ENTER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MAP_ENTER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MAP_ENTER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MAP_ENTER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float speed = 1;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MAP_ENTER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MAP_ENTER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MAP_ENTER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MAP_ENTER::MergeFrom(const MAP_ENTER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MAP_ENTER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAP_ENTER::CopyFrom(const MAP_ENTER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAP_ENTER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MAP_ENTER::Swap(MAP_ENTER* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MAP_ENTER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MAP_ENTER_descriptor_;
  metadata.reflection = MAP_ENTER_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
